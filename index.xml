<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chirag Jariwala</title>
    <link>https://cjhackerz.net/</link>
    <description>Recent content on Chirag Jariwala</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020, All rights reserved to Chirag Jariwala</copyright>
    <lastBuildDate>Mon, 11 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cjhackerz.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding how bootloader works by creating your own firmware</title>
      <link>https://cjhackerz.net/posts/understanding-how-bootloader-works-by-creating-your-own-firmware/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/understanding-how-bootloader-works-by-creating-your-own-firmware/</guid>
      <description>Getting started with memory layouts So in previous blog post on solving CTF challenge created by me on real alike firmware, I did not touched subject of u-boot bootloader in depth and how such firmware was created in first place. Welcome back here again today you will see steps to create your own firmware for qemu and making it work with u-boot. Many of the stuff you might have encoutered during computer science class and you will be amazed how the concepts of fundamental system architecture and operating system works in action.</description>
    </item>
    
    <item>
      <title>WriteUp: First ever real like simulated IoT security challenge</title>
      <link>https://cjhackerz.net/posts/writeup-first-ever-real-like-simulated-iot-security-challenge/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/writeup-first-ever-real-like-simulated-iot-security-challenge/</guid>
      <description>Few months ago I had released a challenge on IoT/Embeded security and put it up on various places inorder to allow people to solve it. Sadly long wait is over and now covid-19 in on rise gloablly there is no interests to solve it even in quarantine. So to give justice to my work I am putting up this write up together which you can follow along to learn and solve my challenge.</description>
    </item>
    
    <item>
      <title>An overview on writing ARM shellcode</title>
      <link>https://cjhackerz.net/posts/an-overview_writing-arm-shellcode/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/an-overview_writing-arm-shellcode/</guid>
      <description>\0x53\0x54\0x41\0x52\0x54 Last month was really productive month that I had in my life after college graduation, I end up learning so many new things also did hands on session on CAN-bus forensics with one of the oldest hacker community called Garage4Hackers. Alongside that I learned a lot about ARM architecture from Azeria with her blog. Also lot&amp;rsquo;s stuff related to learning ARM assembly is available online that&amp;rsquo;s why I am not gonna write entire blog series ARM assembly instead in this article I will just walkthrough ARM shellcoding subject from an introduction point of view.</description>
    </item>
    
    <item>
      <title>ARM and MIPS emulated lab setup for IoT security in Qemu</title>
      <link>https://cjhackerz.net/posts/arm-emulated-environment-iotsec-qemu/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/arm-emulated-environment-iotsec-qemu/</guid>
      <description>Backstory After poking around entire internet for a month, I finally managed to learn how Qemu works in general. There already lots of tutorial out there on how to setup ARM and MIPS based machines inside Qemu but I personally feel those are incomplete guides and does not touch the subject deeply. So that&amp;rsquo;s exact reason for wirting this article giving clear explanation about everything you will need to know inorder to have ARM and MIPS based Qemu virtual machine with full NAT networking support.</description>
    </item>
    
    <item>
      <title>CAN-bus protocol pentesting and forensics</title>
      <link>https://cjhackerz.net/posts/can-bus_protocol_pentesting/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/can-bus_protocol_pentesting/</guid>
      <description>Introduction CAN (Controller Area Network) is a vehicle bus protocol standard which allows microcontrollers and ECU (electronic control units) to communicate which each other without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but can also be used in many other contexts. But why CAN you may ask, because it&amp;rsquo;s low-cost error less since via single CAN interface ECU can communicate with each through the centralized system with less wiring involved and data is transferred over digital signal instead of analog so it reduces chances of error occurrence.</description>
    </item>
    
    <item>
      <title>Reading data from EEPROM without desoldering</title>
      <link>https://cjhackerz.net/posts/reading-firmware-from-eeprom-easyway/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/reading-firmware-from-eeprom-easyway/</guid>
      <description>Introduction In IoT/Hardware security it is common practice of dumping firmware/bootloader data inorder to perform reverse engineering for closed source system applications.
Well known easiest way is to download .bin/.zip (packed firmware) files from device manufacturer&amp;rsquo;s website which they provide to end users for firmware upgrade operations. And later us hackers/security researchers throw these files to reverse engineering softwares such as binwalk to check it&amp;rsquo;s contents and extract the needed stuff.</description>
    </item>
    
    <item>
      <title>UART using Bus Pirate</title>
      <link>https://cjhackerz.net/posts/uart-buspirate/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/uart-buspirate/</guid>
      <description>Introduction UART stands for Universal Asynchronous Receiver/Transmitter. It&amp;rsquo;s not a communication protocol like SPI and I2C, but rather a physical circuit which transmits and receives serial data.
UART transmit data asynchronously, which means there is no clock signal to synchronize the output of bits from the transmitting UART to the sampling of bits by the receiving UART. Instead of a clock signal, the transmitting UART adds start and stop bits to the data packet being transferred.</description>
    </item>
    
    <item>
      <title>Mqtt pwn</title>
      <link>https://cjhackerz.net/posts/mqtt-pwn/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/mqtt-pwn/</guid>
      <description>Previously I was working on university minor project (IPS system for IoT devices). So, I have picked up CVE-2017-7650 to define snort rule for it. I was thinking how someone can leverage this silly vulnerability and I asked my self in current IoT space what kind of data can compromise user&amp;rsquo;s privacy. Yes, it is GPS data. I am big fan of Python programming and wanted to use it&amp;rsquo;s power, so I wrote to small python scripts which gathers list of IP addresses from Shodan API, tries to connect on those IPs as MQTT client.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cjhackerz.net/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/about/</guid>
      <description>root@cjhackerz-net:~# whoami I am Chirag Jariwala, cyber security analyst and IoT security researcher. I have good understanding of Linux systems and devops. I know Python and Go programming.
Biggest Plus point about me is that I can learn and adapt any latest technology which now being used at industrial level into real life application! I am always hungry to learn new and latest stuff out there. Best part of me is that I never hesitate to teach new things that I know and others don&amp;rsquo;t know.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://cjhackerz.net/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/contact/</guid>
      <description> Email: cjhackerz443@protonmail.com LinkedIn: https://linkedin.com/in/cjhackerz GitHub: https://github.com/cjhackerz KeyBase: https://keybase.io/cjhackerz  </description>
    </item>
    
  </channel>
</rss>
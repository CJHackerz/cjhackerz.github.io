<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardware on Chirag Jariwala</title>
    <link>https://cjhackerz.net/tags/hardware/</link>
    <description>Recent content in Hardware on Chirag Jariwala</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2019, All rights reserved to Chirag Jariwala</copyright>
    <lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cjhackerz.net/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WriteUp: First ever real like simulated IoT security challenge</title>
      <link>https://cjhackerz.net/posts/writeup-first-ever-real-like-simulated-iot-security-challenge/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/writeup-first-ever-real-like-simulated-iot-security-challenge/</guid>
      <description>Few months ago I had released a challenge on IoT/Embeded security and put it up on various places inorder to allow people to solve it. Sadly long wait is over and now covid-19 in on rise gloablly there is no interests to solve it even in quarantine. So to give justice to my work I am putting up this write up together which you can follow along to learn and solve my challenge.</description>
    </item>
    
    <item>
      <title>CAN-bus protocol pentesting and forensics</title>
      <link>https://cjhackerz.net/posts/can-bus_protocol_pentesting/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/can-bus_protocol_pentesting/</guid>
      <description>Introduction CAN (Controller Area Network) is a vehicle bus protocol standard which allows microcontrollers and ECU (electronic control units) to communicate which each other without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but can also be used in many other contexts. But why CAN you may ask, because it&amp;rsquo;s low-cost error less since via single CAN interface ECU can communicate with each through the centralized system with less wiring involved and data is transferred over digital signal instead of analog so it reduces chances of error occurrence.</description>
    </item>
    
    <item>
      <title>Reading data from EEPROM without desoldering</title>
      <link>https://cjhackerz.net/posts/reading-firmware-from-eeprom-easyway/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cjhackerz.net/posts/reading-firmware-from-eeprom-easyway/</guid>
      <description>Introduction In IoT/Hardware security it is common practice of dumping firmware/bootloader data inorder to perform reverse engineering for closed source system applications.
Well known easiest way is to download .bin/.zip (packed firmware) files from device manufacturer&amp;rsquo;s website which they provide to end users for firmware upgrade operations. And later us hackers/security researchers throw these files to reverse engineering softwares such as binwalk to check it&amp;rsquo;s contents and extract the needed stuff.</description>
    </item>
    
  </channel>
</rss>